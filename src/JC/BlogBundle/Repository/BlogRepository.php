<?php

namespace JC\BlogBundle\Repository;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogRepository extends \Doctrine\ORM\EntityRepository
{

    public function getLatestBlogs($limit = null)
    {
        $qb = $this->createQueryBuilder('b')
            ->select('b, c')
            ->leftJoin('b.comments', 'c')
            ->addOrderBy('b.created', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        return $qb  ->getQuery()
                    ->getResult();
    }

    /**
     * retourne la liste des article qui un un id voulu
     * @param $blog_id
     * @param null $limit
     * @return array
     */
    public function getSelectedBlog($blog_id, $limit = null)
    {
        $qb = $this->createQueryBuilder('b')
            ->select('b, c')
            ->where('b.id IN(:blog_id)')
            ->leftJoin('b.comments', 'c')
            ->setParameter('blog_id', $blog_id )
            ->addOrderBy('b.created', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        return $qb  ->getQuery()
            ->getResult();
    }



    public function getSelectecTagBlog($tag, $limit = null)
    {

        $selected_tag = $this->createQueryBuilder('b')
            ->select('b, c')
            ->leftJoin('b.comments', 'c')
            ->where('b.tags = :tag')
            ->addOrderBy('b.created', 'DESC')
            ->setParameter('tag', $tag);

        if (false === is_null($limit))
            $selected_tag->setMaxResults($limit);

        return $selected_tag  ->getQuery()
            ->getResult();
    }




    /**
     * se sert ensuite du tableau de tafs pour calculer le poids (weight) de chaque tag à partir de son nombre
     * d’occurences dans le tableau. Les tags sont également mélangés afin d’ajouter un peu d’aléatoire à leur affichage.
     *
     * @param $tags
     * @return array
     */
    public function getTagWeights($tags)
    {
        $tagWeights = array();
        if (empty($tags))
            return $tagWeights;

        foreach ($tags as $tag)
        {
            $tagWeights[$tag] = (isset($tagWeights[$tag])) ? $tagWeights[$tag] + 1 : 1;
        }
        // Shuffle the tags
        uksort($tagWeights, function() {
            return rand() > rand();
        });

        $max = max($tagWeights);

        // Max of 5 weights
        $multiplier = ($max > 5) ? 5 / $max : 1;
        foreach ($tagWeights as &$tag)
        {
            $tag = ceil($tag * $multiplier);
        }

        return $tagWeights;
    }

}
